#!/usr/bin/perl -w
#
# Common Application Framework Example
#
# German Cancio <German.Cancio@cern.ch>
#
# $Id: example,v 1.5 2005/04/18 13:31:31 gcancio Exp $
#

=pod


=head1 NAME


example - Common Application Framework Example


=head1 SYNOPSIS

example [options]

=head1 DESCRIPTION

This is the example  of the Common Application Framework.

=head1 FILES

put information about files here

=head1 AUTHORS

put information about authors here

=head1 VERSION

put information about version here

=cut


#
# Standard Common Application Framework beginning sequence
#

# verbose die
# use Carp;
# $SIG{__DIE__} = sub { confess($_[0]) };

#
# Beginning sequence (neccessary only for EDG stuff)
#

BEGIN {
  #
  # default prefix:
  my $edg_prefix='/opt/edg';
  # find out if EDG_LOCATION is set ...
  # ... and take it as the prefix
  if (defined $ENV{'EDG_LOCATION'}) {
    $edg_prefix=$ENV{'EDG_LOCATION'};
  }

  #
  # future extension: take into account EDG top level config file
  # (eg. parse using AppConfig)

  # use libs from $edg_prefix/lib/perl
  unshift(@INC,$edg_prefix.'/lib/perl');
}


#------------------------------------------------------------
# Application
#------------------------------------------------------------

package example;
use CAF::Application;
use LC::Exception qw (SUCCESS throw_error);
use CAF::Reporter;

use strict;
use vars qw(@ISA);

@ISA= qw(CAF::Application CAF::Reporter);


#------------------------------------------------------------
# Public Methods/Functions for CAF
#------------------------------------------------------------


sub app_options {

  push(my @array,
       {NAME =>'specific=s' ,
	DEFAULT=>'anything',
	HELP=>'do somewhat on specific'},
       {NAME =>'M|myoption|alias3:s',
	HELP =>'this is a very good help'},
       {NAME =>'something=s@',
	HELP =>'again this is very helpful'},
       {NAME =>'book=s%',
	HELP =>'hash with books'},
       {NAME =>'cfgfile=s',
	HELP =>'configuration file name',
	DEFAULT=>'./example.cf'},
       {NAME =>'logfile=s',
	HELP =>'log path/filename to use',
	DEFAULT=>'/tmp/example-logfile'},
       {NAME =>'noaction',
	HELP =>'do not actually perform operations.'}
       );

  return \@array;
}



#
# initialize
#

sub _initialize {
  my $self = shift;
  #
  # define application specific data.
  #
  #
  # external version number
  #
  $self->{'VERSION'} ='1.11';
  #
  # show setup text
  #
  $self->{'USAGE'} = "Usage: example [options] [parameters]\n";

  #
  # log file policies
  #
  $self->{'LOG_APPEND'}=1; # append to logfile, do not truncate
  $self->{'LOG_TSTAMP'}=1; # add time stamp before every entry in log
  #
  # start initialization of CAF::Application
  #
  unless ($self->SUPER::_initialize(@_)) {
    return undef;
  }

  # start using log file (could be done later on instead)
  $self->set_report_logfile($self->{'LOG'});

  return SUCCESS;
}



#############################################################
# Main Program
#############################################################

package main;
use LC::Exception qw (SUCCESS throw_error);
use IO::Handle;
use strict;
use vars qw($this_app %SIG);

# fix umask
umask (022);
# minimal Path
$ENV{"PATH"} = "/bin:/sbin:/usr/bin:/usr/sbin";

# unbuffer STDOUT & STDERR
autoflush STDOUT 1;
autoflush STDERR 1;

#------------------------------------------------------------
# Functions in the main program
#------------------------------------------------------------

#
# Handle signals properly (if neccessary)
#
$SIG{'INT'} =\&signal_handler;
$SIG{'TERM'}=\&signal_handler;
$SIG{'QUIT'}=\&signal_handler;
$SIG{'USR2'}=\&signal_handler;
$SIG{'HUP'}='IGNORE';

sub signal_handler {
  my $signal=shift;
  $this_app->report('received signal: '.$signal);

  #
  # do whatever
  #

  throw_error('Cannot handle signal: '.$signal);
  return undef;
}


#------------------------------------------------------------
# main loop
#------------------------------------------------------------

#
# initialize the main class.
#
unless ($this_app = example->new($0,@ARGV)) {
  throw_error("cannot start application");
}

#
# now we can start with the application.
#


$this_app->report("option 'specific' is set to '",
		  $this_app->option('specific'),"'");


$this_app->info('good to know');

$this_app->warn("don't do this again");

$this_app->log('this goes only to my logfile');

$this_app->verbose('this is only verbose info');

$this_app->debug(4,'this is debug 4 info');

$this_app->info('The non-option cmd line args are: ',join(',',@ARGV));

unless ($this_app->option('noaction')) {
  $this_app->info('doing the real work.');
}

$this_app->OK("everything works fine");

my %hash=%{$this_app->option('book')};
foreach (keys %hash) {
	$this_app->info ("book ".$_." -> ".$hash{$_});
}

my @array=@{$this_app->option('something')};
foreach (@array) {
        $this_app->info ("something -> ".$_);
}

exit(0);
